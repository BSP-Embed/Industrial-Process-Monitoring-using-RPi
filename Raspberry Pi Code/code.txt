/* Application for Industrial Process Control */

#include <stdio.h>
#include <unistd.h>
#include <pigpio.h>
#include <stdlib.h>
#include <ncurses.h>

static char ReadRFData(void);
static void init(void);
static void gpioinit(void);
static void disptitle(void);

unsigned char RFData[10];

void main (int argc, char *argv[])
{

        float temp;
        FILE *fp;

        if (gpioInitialise() < 0) {
                fprintf (stderr, "piGPIO Initialize Failed\n");
                return 1;
        }
        init();

        while(1) {
                switch(ReadRFData()) {
                        case 'T':
                                move(3,16);
                                printw("%s", RFData);
                                temp = atof(RFData);
                                if (temp > 35.0) {
                                        move(6,0);
                                        printw("High Temperature");
                                }
                                fp=fopen("Database.txt", "a");
                                fwrite(RFData, sizeof(RFData[0]), 4/*sizeof(RFData)/sizeof(RFData[0])*/, fp);
                                fwrite("\t", sizeof(char), 1, fp);
                                fclose(fp);
                                break;
                        case 'L':
                                move(4,16);
                                printw("%s",RFData);
                                fp=fopen("Database.txt", "a");
                                fwrite(RFData, sizeof(RFData[0]), 4/*sizeof(RFData)/sizeof(RFData[0])*/, fp);
                                fwrite("\n", sizeof(char), 1, fp);
                                fclose(fp);
                                break;
                }
                refresh();
        }
}

static void init(void)
{
        gpioinit();
        disptitle();
}
static void disptitle(void)
{
        initscr();

        printw("***********************************\n");
        printw("Global Industrial Process Control\n");
        printw("***********************************\n");

        printw("Temperature:\t\t'C\n");
        printw("Water Level:\t\t%\n");

        refresh();
}

static void gpioinit(void)
{

        gpioSetMode(17,PI_INPUT);
        gpioSetMode(25,PI_INPUT);
        gpioSetMode(22,PI_INPUT);
        gpioSetMode(23,PI_INPUT);
        gpioSetMode(24,PI_INPUT);
}

static char ReadRFData(void)
{

        unsigned char Bits[8];
        unsigned char i, j;
        char Param;

        for (i = 0; i < 8; i++)
                Bits[i] = 0;

        for (i = 0; i < 10; i++)
                RFData[i] = 0;

        for (j = 0; j < 7; j++) {
                while (gpioRead(17) == 1);
                usleep(5000);

                Bits[4] = gpioRead(25);
                Bits[5] = gpioRead(22);
                Bits[6] = gpioRead(23);
                Bits[7] = gpioRead(24);

                while (gpioRead(17) == 0);

                while (gpioRead(17) == 1);
                usleep(5000);

                Bits[0] = gpioRead(25);
                Bits[1] = gpioRead(22);
                Bits[2] = gpioRead(23);
                Bits[3] = gpioRead(24);c

                for (i = 0; i < 8; i++)
                        if (Bits[i] == 0)
                                Bits[i] = 1;
                        else
                                Bits[i] = 0;
                for (i = 0; i < 8; i++)
                        RFData[j] |= (Bits[i] << i);

                while (gpioRead(17) == 0);
        }

        Param = RFData[1];
        for (i = 2; i < 6; i++)
                RFData[i-2] = RFData[i];
        RFData[i] = '\0';

        return Param;
}
